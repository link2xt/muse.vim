Given muse;
* Part

Execute (part header):
  AssertEqual SyntaxOf('Part'), 'header'

Given muse;
** Chapter

Execute (chapter header):
  AssertEqual SyntaxOf('Chapter'), 'header'

Given muse;
*** Section

Execute (section header):
  AssertEqual SyntaxOf('Section'), 'header'

Given muse;
**** Subsection

Execute (subsection header):
  AssertEqual SyntaxOf('Subsection'), 'header'

Given muse;
***** Subsubsection

Execute (subsubsection header):
  AssertEqual SyntaxOf('Subsubsection'), 'header'

Given muse;
*emphasized*

Execute (emphasis):
  AssertEqual SyntaxOf('emphasized'), 'emphasis'

Given muse;
*
foo*

Execute (newline in the beginning of emphasis):
  AssertNotEqual SyntaxOf('foo'), 'emphasis'

" We can't make simple test,
" similar to the previous one,
" because Vim allows any region to end with the end of file.
Given muse;
*foo
*
bar*
baz

" Here we check that "*" on the second line
" does not end emphasis by requiring that "bar"
" is emphasized.
Execute (newline in the end of emphasis):
  AssertEqual SyntaxOf('foo'), 'emphasis'
  AssertEqual SyntaxOf('bar'), 'emphasis'
  AssertNotEqual SyntaxOf('baz'), 'emphasis'

Given muse;
*x*

Execute (emphasized letter):
  AssertEqual SyntaxOf('x'), 'emphasis'

Given muse;
**strong**

Execute (strong):
  AssertEqual SyntaxOf('strong'), 'strong'

Given muse;
***strong emphasis***

Execute (strong emphasis):
  AssertEqual SyntaxOf('strong emphasis'), 'strongEmphasis'

Given muse;
This is * not emphasized*.

Execute (space is not allowed after opening emphasis *):
  AssertNotEqual SyntaxOf('not emphasized'), 'emphasis'

Given muse;
foo *bar
bat* baz

Execute (multiline emphasis);
  AssertNotEqual SyntaxOf('foo'), 'emphasis'
  AssertEqual SyntaxOf('bar'), 'emphasis'
  AssertEqual SyntaxOf('bat'), 'emphasis'
  AssertNotEqual SyntaxOf('baz'), 'emphasis'

Given muse;
; This is a comment

Execute (comment):
  AssertEqual SyntaxOf('This is a comment'), 'Comment'

Given muse;
<em>foo</em> bar <em>baz</em>

Execute (<em> tag is not greedy):
  AssertEqual SyntaxOf('foo'), 'emphasisTag'
  AssertNotEqual SyntaxOf('bar'), 'emphasisTag'
  AssertEqual SyntaxOf('baz'), 'emphasisTag'

Given muse;
<example>
foo
<em>bar</em>
baz
</example>

Execute (<example> tag):
  AssertEqual SyntaxOf('foo'), 'example'
  AssertEqual SyntaxOf('bar'), 'example'
  AssertEqual SyntaxOf('baz'), 'example'

Given muse;
{{{
foo
<em>bar</em>
baz
}}}

Execute (lightweight <example> markup):
  AssertEqual SyntaxOf('foo'), 'example'
  AssertEqual SyntaxOf('bar'), 'example'
  AssertEqual SyntaxOf('baz'), 'example'

Given muse;
<verbatim>foo <em>bar</em> baz</verbatim>

Execute (verbatim):
  AssertEqual SyntaxOf('foo'), 'verbatim'
  AssertEqual SyntaxOf('bar'), 'verbatim'
  AssertEqual SyntaxOf('baz'), 'verbatim'

Given muse;
<code>foo <em>bar</em> baz</code>

Execute (code tag):
  AssertEqual SyntaxOf('foo'), 'code'
  AssertEqual SyntaxOf('bar'), 'code'
  AssertEqual SyntaxOf('baz'), 'code'

Given muse;
=foo <em>bar</em> baz=

Execute (lightweight code markup):
  AssertEqual SyntaxOf('foo'), 'code'
  AssertEqual SyntaxOf('bar'), 'code'
  AssertEqual SyntaxOf('baz'), 'code'

Given muse;
= not code=

Execute (no space after opening =):
  AssertEqual SyntaxOf('not code'), ''

Given muse;
foo~~bar

Execute (non-breaking space):
  AssertEqual SyntaxOf('\~\~'), 'nbsp'
